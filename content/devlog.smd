---
.title = "Blockeditor Devlog",
.date = @date("2024-09-25T00:00:00"),
.author = "pfg",
.layout = "devlog.shtml",
.alternatives = [{
	.layout = "devlog.xml", 
	// this is the output path of the generated xml file
	.output = "devlog/rss.xml",
}],
.draft = false,
---

# [2024-10-07]($section.id("2024-10-07"))

- Add a background rectangle to the windows
- Anti-aliased rounded rectangles
  - I'm not sure what the right way to implement them is but this uses the fragment
    shader and some extra vertex information + fwidth() to determine how far to antialias.
    It's in the main shader so it adds extra cost to every vertex, not just the rounded ones.
- More preperation for supporting docking windows in the window manager.

[rounded rectangles and a circleâ€½]($image.asset('2024-10-07-progress.png'))

# [2024-10-06]($section.id("2024-10-06"))

- implement the first version of `b2.textLine()`
- reimplement the file listing tree and make it support opening folders and files.
  opening a large file freezes the application, probably because it's trying to render
  a huge amount in a single line?
- add tracyEmitFrameImage binding but don't use it yet, I'm not sure how to get
  the image texture being rendered to in order to try to use mapAsync.
- switch tracy to use cImport in case stuff changes so it will be caught in an update
- try to update tracy. it builds, but crashes with SIGSEGV

# [2024-10-05]($section.id("2024-10-05"))

- begin to make a generic renderLine implementation that caches vertices and
  will eventually support line wrap.

# [2024-10-04]($section.id("2024-10-04"))

- add some more profiling points
- layout is too slow, we need to speed it up. also, we have to transition away
  from ikeys and towards callbacks, which are probably slow.
- positionFromLynCol is too slow when there is one large span. we need to limit
  the maximum size of spans.
- begin on an fs tree. it needs beui text and buttons still.
- first attempt at implementing sticky scrolling. i'm not quite sure what is needed
  to do it, but this attempt didn't work.
- update sheen_bidi to use addTranslateC again. it works fine when building android,
  not sure why I switched it before.

plans for the future:

- implement b2.text! have it cache vertices so it can submit just one big vertex array
  to the render list unless the text changed or glyph image reset.
- migrate events to callback-based handling unfortunately.
- support expanding folders in the file tree
- watch the folders in the file tree to be able to update them on change

# [2024-10-03]($section.id("2024-10-03"))

- remove calling alignForward on the result of sizeOf - it's guaranteed to be the same
- move all wm interaction processing to the beginning of the frame
- fix editorview selecting when it's not clicked
- fix tests & android build were failing
- add a test for rendering the app. it just tests that it doesn't panic, doesn't test interaction.
- prepare beui2 wm for supporting docking windows to eachother.
- fix scrolling on the two windows is working again
- add padding to the editor view
- add titlebars to the windows

[windows. they don't look great without rounded borders]($image.asset('2024-10-03-windows.png'))

# [2024-10-02]($section.id("2024-10-02"))

- switch beui2 wm to provide the window chrome at the cost of no longer being
  theme independent. we will get it back eventually but for now it's more important
  to get windows implemented with one standard theme while we figure it out.
- mock up of potential window designs. render_list doesn't support rounding yet so
  we'll implement the second one with no rounding for now and add rounding later.

[first mockup of a potential beui2 window design]($image.asset('2024-10-02-mockup_1.png'))

[second mockup of a potential beui2 window design. we'll implement this, but with rounded corners coming later.]($image.asset('2024-10-02-mockup_2.png'))

# [2024-10-01]($section.id("2024-10-01"))

- finish migration of text editor to virtual scroller
- add draw list state to beui2. it keeps around data for one frame associated with
  an id so you can access it again. it also tells you the position you were on screen
  last frame.
- remake text selection to be frame-perfect. the first frame we know about the
  inputs is the one where we visibly show selected text.
- add initial draggable and resizable windows to beui2. on linux the corner resize
  cursors don't show which is really confusing.
- add vscode run configurations to build and launch the app into a debugger or
  run with tracy.
- convert all of beui2 to use floats, it gets us better prepared for non integer scaling
  maybe. or maybe it doesn't and we'll switch it all back to ints.
- attempt to update tracy, but their new cmake fetches dear imgui from source and
  applies some patches and that will take some effort to replicate in build.zig. or we
  could have build.zig run cmake. cmake is self-hosted unfortunately.

[screenshot of a beui2 window. there's no clipping or wrapping yet so the text is escaping its bounds, and the windows are unstyled.]($image.asset('2024-10-01-beui2_window.png'))

# [2024-09-30]($section.id("2024-09-30"))

- disable grapheme cursor on unsupported platforms and fall back to codepoint
  break point in text editor
- get app building on android. it finds every Compile step in the compilation and
  adds the libc file if it its target's abi is android
- move c++ example triangle to zig on android
- get android app rendering!
- move text cache into beui2 & begin on tabs
- start to switch EditorView to use generic b2 virtualized scrolling (it doesn't build yet,
  there's more coding to do)

the android app is rendering!

[screenshot of android emulator showing the text editor with a keyboard]($image.asset('2024-09-30-blockeditor_android_app.png'))

# [2024-09-29]($section.id("2024-09-29"))

- extract beui implementation out of app logic in preperation for multi backend
- begin to make text editor a beui2 component
- begin trying to compile app for android. it needs a libc file, but the libc file
  isn't working yet.

# [2024-09-28]($section.id("2024-09-28"))

- put glyph cache into layout cache
- tried to generalize an image cache, but the glyph cache wants to store extra
  information about each glyph in addition to just the image data
- add middle mouse scroll emulation - middle click and drag smoothly scrolls
- add an android studio project that compiles a zig function and calls it

# [2024-09-27]($section.id("2024-09-27"))

- eliminate zigx
- switch components to virtual format in preperation for new transform
- improve performance of asserting the same id isn't used multiple times by
  replacing autoHash with hashing bytes and std.meta.eql with std.mem.eql.
- implement state
- fully implement virtual scroller so it stores state and is properly virtualized
- extract layout cache out of text editor view in preperation for adding text as
  a beui2 fn

# [2024-09-26]($section.id("2024-09-26"))

- look into how badly zigx works with composed components
- mock up a new version of zigx that compiles to virtual functions :/

# [2024-09-25]($section.id("2024-09-25"))

- find click target in beui2
- take ids out of a global stack and into regular args
- implement an example composed button
- create a zig extension "zigx" to support stack-capturing macro syntax
- use zigx for beui2 example

# [2024-09-25]($section.id("2024-09-25"))

- find click target in beui2
- take ids out of a global stack and into regular args
- implement an example composed button
- create a zig extension "zigx" to support stack-capturing macro syntax
- use zigx for beui2 example

# [2024-09-24]($section.id("2024-09-24"))

- not ready to implement markdown yet - we'll wait until beui text rendering and then do manual
  queries in Core rather than having it be its own module
- fix undoing every item at the end of the core test not working right
- change TextStack to no longer require ending items
- make undo preserve cursor position
- batch undos for text insert operations and delete operations
- automatically connect tracy when running with -Dtracy
- start on the real plan for beui_experiment. this will work. and it will be soo nice. well not
  that nice, it's a bit ugly and verbose. but maybe we'll port it to qxc eventually and there
  it will be nice, and here it will be acceptable. it will still be so nice once text editor
  rendering is literally a generic virtualized list render with nothing special about it.

# [2024-09-23]($section.id("2024-09-23"))

- finish replace_and_delete operation
- change genoperations to write to an operations writer rather than writing an array of structs
- add tracing frames to alloc calls wrapped in a tracy allocator
- remove old replace op and delete op
- impl undo support for replace_and_delete
- add tree sitter markdown package
- package tree_sitter into its own module with bindings seperate from text_editor
- move advanceAndRead fn to tree sitter
- get tree sitter ready for multi language + syn hl reorganization
- begin markdown highlighter

# [2024-09-22]($section.id("2024-09-22"))

Milestone: our editor is usable. If it could save and browse files, we could
start using it right now to do editing. It feels pretty nice.

- Disable TcpSync on windows for now: https://github.com/ziglang/zig/issues/21492
- Move files around: editor_view -> beui and some files -> structs
- Implement Position <-> LynCol functions in Document and update editor core functions
  to use them
- Add a toggle button for syntax highlighting to see the perf cost (not as high anymore
  compared to the other things eating miliseconds)
- Fix running with -Dtracy wasn't keeping imgui.ini settings because it was using the wrong
  folder
- Add frame prepare time display
- Change doc comment body to be white
- Change block.applyOperation to accept multiple operations at once
- Start thinking about Beui
- Change tint in vertex struct to take just one u32 instead of 4xf32
- Upgrade tree_sitter and tree-sitter-zig
- Fix "{{" in syntax highlighting
- Fix ctrl+enter at end of line
- Pipe undo operations all the way through in preperation for supporting undo/redo
- Simplify insert applyOperation logic
- Simplify delete applyOperation logic
- Begin work on new combined replace_and_delete operation

# [2024-09-21]($section.id("2024-09-21"))

- Fix kerning being wrong
- Create tracy package that builds tracy client and profiler with bindings
- Create anywhere package that allows calling tracy methods from packages
  that don't depend on tracy. They do nothing unless the root module defines
  anywhere_cfg containing tracy.
- Add tracy traces to many functions and to allocator
- Support building editor from root folder with `-Dtracy` which will link tracy
  client lib, compile tracy exe, and spawn both the editor and tracy.
- Cache harfbuzz runs, speed up draw list appends, speed up (~10x) finding
  character syntax highlighting scope
- Create idiomatic zig bindings for the portion of tree sitter we use and update
  to use them everywhere
- Add zgui to anywhere and use this to create an inspector UI to show the
  current tree sitter nodes under the cursor
- Add more search paths for verdana.ttf. We can't really use fontconfig, it's
  a horrible library to build.
- Fix syntax highlighting not supporting `//!` comments and not marking
  the character immediately after the slashes as a comment
- Some progress towards initial server

# [2024-09-20]($section.id("2024-09-20"))

- Add sheen_bidi package that builds sheen_bidi, exports translate-c
  bindings, and has a test of example usage
- Load truetype font, lay out glyphs with harfbuzz, render glyphs to texture,
  load and update texture in gpu, switch text rendering to truetype+harfbuzz,
  add theme constant for cursor style, render selection and cursor again with
  new text, support cursor positions partway through bytes in rendering
- Remove the rainbow translucency test squares
- Switch from using a magic number to disable texture sampling to using
  any uv coordinate outside of 0.0...1.1
- Add back showing invisibles under text selection